% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-corpus-features.R
\name{get_corpus_features}
\alias{get_corpus_features}
\title{Get corpus features}
\usage{
get_corpus_features(x, revoice_from, min_octave, max_octave, min_notes,
  max_notes, features = voice_features(), verbose = TRUE)
}
\arguments{
\item{x}{The corpus to analyze, expressed as a list of chord sequences,
where each chord sequence is expressed as a list of chords,
and each chord is expressed as a numeric vector of
non-duplicated MIDI note numbers in ascending order.
The corpus may also be expressed as a \code{\link[hrep]{corpus}}
object from the \code{hrep} package,
and chords may be expressed as \code{\link[hrep]{pi_chord}}
objects from the \code{hrep} package.}

\item{revoice_from}{(Character scalar)
Determines the representation to which each chord is reduced
before generating candidate revoicings.
Currently supported values are \code{"pc_chord"} and \code{"pc_set"},
corresponding to \code{\link[hrep]{pc_chord}}
and \code{\link[hrep]{pc_set}} from the \code{hrep} package respectively.
In the former case, bass pitch classes are preserved,
but in the latter they are not.}

\item{min_octave}{(Numeric scalar)
The minimum octave from which the candidate voicings should be drawn,
expressed relative to middle C.
For example, \code{min_octave = -1} means that all voicings
will be drawn from C3 (MIDI note number 48) or above
(see also \code{\link{voice_opt}}).
An error will be thrown if the corpus contains chords that
span lower than permitted by this argument.}

\item{max_octave}{(Numeric scalar)
The maximum octave from which the candidate voicings should be drawn,
expressed relative to middle C.
For example, \code{min_octave = 0} means that all voicings
will be drawn from the octave beginning on middle C or lower,
corresponding to pitch heights strictly less than C5
(MIDI note number 72)
(see also \code{\link{voice_opt}}).
An error will be thrown if the corpus contains chords that
span higher than permitted by this argument.}

\item{min_notes}{(Integer scalar)
The minimum number of unique notes permitted in each candidate voicing.
An error will be thrown if the corpus contains chords with fewer
notes than this number.}

\item{max_notes}{(Integer scalar)
The maximum number of unique notes permitted in each candidate voicing.
An error will be thrown if the corpus contains chords with more
notes than this number.}

\item{features}{A list of features to compute for each chord voicing
(see \code{\link{voice_opt}}).}

\item{verbose}{(Logical scalar)
Whether or not to print progress messages.}
}
\value{
A \code{\link[tibble]{tibble}} where each row describes
a candidate voicing for a particular chord in the corpus,
along with its computed features, with the following columns:
\itemize{
\item \code{id} - An integer ID variable that uniquely indexes each chord position
in the corpus, beginning at 1 and counting upwards.
\item \code{seq} - An integer ID variable that uniquely indexes each sequence
in the corpus, beginning at 1 and counting upwards.
\item \code{pos} - An integer ID variable that uniquely indexes each chord position
in each sequence, restarting at 1 for the beginning of each sequence,
and counting upwards.
\item \code{chosen} - A logical variable indicating whether this particular
voicing was the one observed in the original corpus.
Each level of \code{id} should have \code{chosen = TRUE} exactly once.
\item \code{midi} - A character variable describing the pitch content
of the voicing, with each pitch represented as a MIDI note number,
and with these MIDI note numbers pasted together and separated
by spaces.
\item Subsequent columns provide features values as computed by
the functions provided in \code{features}.
}
}
\description{
Analyzes a musical corpus to return a \code{\link[tibble]{tibble}}
describing feature values for all possible voicings
of a series of chord sequences.
}
